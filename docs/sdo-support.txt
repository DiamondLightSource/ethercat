#  -*- mode: org -*-

* Specification at scanner initialization

SDO requests are registered in the scanner configuration

The section <sdorequests> is parsed to the configuration structures

Example:

<sdorequests>
  <sdo name="DOX Settings Ch. 1" slave="EA1.11" index="0x8000" >
    <sdoentry description="Voltage Output" subindex="0x8" size="8" 
              asynparameter="voltage"/>
  </sdo>
</sdorequests>

* SDO size supported

The Ethercat specification supports any size SDO.
This implementation limits the support to 32-bit entries, because of
the use of asynInt32 parameters in the EPICS side.

For example, the table below shows the types of SDOS in the EL2595
and the range supported.

| type         | size    | supported (Y/N) |
|--------------+---------+-----------------|
| type 0000    | 0 bit   | Y               |
| bool         | 1 bit   | Y               |
| type 0000    | 2 bit   | Y               |
| type 0000    | 3 bit   | Y               |
| type 0000    | 4 bit   | Y               |
| type 0000    | 5 bit   | Y               |
| type 0000    | 7 bit   | Y               |
| uint8        | 8 bit   | Y               |
| string       | 16 bit  | Y               |
| uint32       | 32 bit  | Y               |
| string       | 48 bit  | NO              |
| uint64       | 64 bit  | NO              |
| octet_string | 224 bit | NO              |

* Scanner to EPICS communications

These message types are used:

MSG_SDO_REQ    a read request from the client (EPICS)
MSG_SDO_WRITE  a write request from the client (EPICS)
MSG_SDO_READ   an answer from the scanner

The request can be in one of these states (ethercat library's
ec_requets_state_t)

    EC_REQUEST_UNUSED, /**< Not requested. */
    EC_REQUEST_BUSY, /**< Request is being processed. */
    EC_REQUEST_SUCCESS, /**< Request was processed successfully. */
    EC_REQUEST_ERROR, /**< Request processing failed. */

* Read request

An EPICS record is processed for a read request.

e.g.
record(longin, "DEVICE:OUTPUT_VOLTAGE")
{
   field(DTYP, "asynInt32")
   field(INP, "@asyn(ERIO.1)voltage")
   field(SCAN, "1 second")
}

record(mbbi, "DEVICE:OUTPUT_VOLTAGE:STAT")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(ERIO.1)voltage_stat)
    field(SCAN, "1 second")
    field("ONVL", "0")
    field("TWVL", "1")
    field("THVL", "2")
    field("FRVL", "3")
    field("ONST", "UNUSED")
    field("TWST", "BUSY")
    field("THST", "SUCCESS")
    field("FRST", "ERROR")
}

