#
# Program to create a scanner configuration
# from the xml generated by the ethercat tool
#
#
## EL2612 Channel 1 Output 
# 1,   1,  0, 3,  0x2,  0xa343052,  0x7000,  0x1,  1
## EL2612 Channel 2 Output 
# 2,   1,  0, 3,  0x2,  0xa343052,  0x7010,  0x1,  1
##
import xml.dom.minidom
import sys
import time

debug = False
first_line = True

def getFirstNode(node, label):
    return node.getElementsByTagName(label)[0]

def getNodeText(node, label):
    child = getFirstNode(node, label).firstChild
    if child:
        return child.wholeText.encode('ISO-8859-1')
    else:
        return ""

def nodeHasTag(node, label):
    if node.getElementsByTagName(label):
        return True
    #empty list
    return False

def get_pdo_entries(pdos):
    elist = []
    for entry in pdos.getElementsByTagName("Entry"):
        e = {}
        e['index'] = getNodeText(entry, "Index")
        if debug:
            print "pdo_entry index %s" % e['index']
        e['name'] = ""
        if nodeHasTag(entry, "Name"):
            e['name'] = getNodeText(entry, "Name")
        e['subindex'] = "0" # default subindex
        if nodeHasTag(entry, "SubIndex"):
            e['subindex'] = getNodeText(entry, "SubIndex")
        e['bitlen'] = getNodeText(entry, "BitLen")
        elist.append(e)
    return elist

last_slave_no = -1

def get_channels(slave):
    global last_slave_no
    result = {}
    result['vendor_id'] = getNodeText(slave, "Id")
    # product_code
    device_node = getFirstNode(slave, "Device")
    type_node = getFirstNode(device_node, "Type")
    result['product_code'] = type_node.getAttribute('ProductCode')
    result['name'] = getNodeText(device_node, "Type")
    result['comment'] = slave.childNodes[1]
    #print slave.childNodes[1]
    slave_as_string = slave.childNodes[1].nodeValue.replace(' Slave ','').replace(' ','')
    try:
      result['slave_no'] = int(slave_as_string)
    except ValueError:
      print >> sys.stderr, \
        "Warning: not decimal in slave_no (%s), trying hex" % slave_as_string
      result['slave_no'] = int(slave_as_string, 16)
    if result['slave_no'] <= last_slave_no:
        print >> sys.stderr, \
         "Warning: non-monotonic slave numbering in slave_no %s" % \
         slave.childNodes[1].nodeValue
    last_slave_no = result['slave_no']
    #outputs
    output_list = []
    rxpdos = device_node.getElementsByTagName("RxPdo")
    for rxpdo in rxpdos:
        output = {}
        output['name'] = getNodeText(rxpdo, "Name")
        output['entries'] = get_pdo_entries(rxpdo)
        output_list.append(output)
    result['output_list'] = output_list
    #inputs
    input_list = []
    txpdos = device_node.getElementsByTagName("TxPdo")
    for txpdo in txpdos:
        ch_input = {}
        ch_input['name'] = getNodeText(txpdo, "Name")
        if debug:
            print "txpdos...", ch_input['name']
        ch_input['entries'] = get_pdo_entries(txpdo)
        input_list.append(ch_input)
    result['input_list'] = input_list
    return result


def get_all_channels(parseFile):
    f = open(parseFile)
    raw_text = f.read()
    f.close()
    fixed_text = raw_text.decode('cp1252').encode('utf8')
    dom = xml.dom.minidom.parseString(fixed_text)
    allchans = {}
    for slave in dom.getElementsByTagName("EtherCATInfo"):
        result = get_channels(slave)
        if debug:
            print "GOT slave %d, vendor id %s, product code %s" % \
                (result['slave_no'],result['vendor_id'],result['product_code'])
        allchans[result['slave_no']] = result
    return allchans

def scanner_entry_config(slave_dict, list_label, strbuff, channel_number):
    for pdo in slave_dict[list_label]:
        for entry in pdo['entries']:
            comment = slave_dict['name'] + ' ' + pdo['name'] + ' ' + entry['name']
            strbuff = strbuff + "# %s \n" % comment
            strbuff = strbuff + " %d, " % channel_number
            strbuff = strbuff + "  1, "   #assigned
            strbuff = strbuff + "  0, "   #alias
            strbuff = strbuff + " %d, " % slave_dict['slave_no']
            strbuff = strbuff + " 0x%x, " % int(slave_dict['vendor_id'])
            product_code = int(slave_dict['product_code'].replace('#x',''), 16)
            strbuff = strbuff + " 0x%x, " % product_code
#            print "xxx", entry
            strbuff = strbuff + " 0x%x, " % int(entry['index'].replace('#x',''),16)
            strbuff = strbuff + " 0x%x, " % int(entry['subindex'])
            strbuff = strbuff + " %d\n" % int(entry['bitlen'])
            channel_number = channel_number + 1
    return ( channel_number , strbuff )

def scanner_config(channel_dict, parseFile):
    """ outputs a scanner configuration to stdout """
    strbuff = ""
    strbuff = strbuff + "# **************************\n"
    strbuff = strbuff + "# Configuration generated from xml description " \
            +       "using create_config.py \n" 
    strbuff = strbuff + "#\n"
    strbuff = strbuff + "# created on %s\n" % time.asctime()
    strbuff = strbuff + "# Input file: %s\n" % parseFile 
    strbuff = strbuff + "# Formatted in 9 columns: \n"
    strbuff = strbuff + "#  1 channel_no,  \n"
    strbuff = strbuff + "#  2 assigned (0/1),  \n"
    strbuff = strbuff + "#  3 alias,  \n"
    strbuff = strbuff + "#  4 bus position,  \n"
    strbuff = strbuff + "#  5 vendor_id (hex),  \n"
    strbuff = strbuff + "#  6 product_code (hex),  \n"
    strbuff = strbuff + "#  7 pdo index (hex),  \n"
    strbuff = strbuff + "#  8 pdo subindex (hex),  \n"
    strbuff = strbuff + "#  9 pdo bit length  \n" 
    strbuff = strbuff + "# **************************\n"
    channel_number = 1
    for k in channel_dict.keys():
        s = channel_dict[k]
        (channel_number, strbuff) = scanner_entry_config(s, 'output_list',
                                                     strbuff, channel_number)
        (channel_number, strbuff) = scanner_entry_config(s,  'input_list',
                                                     strbuff, channel_number)
    print strbuff

def usage():
    print sys.argv[0] + "  output ethercat bus configuration"
    print "Usage:"
    print "   %s  <xml-config-file>" % sys.argv[0]
    sys.exit(2); 

if __name__ == "__main__":
    if  len(sys.argv) < 2:
        usage()
    parseFile = sys.argv[1]
    chans = get_all_channels(parseFile)
    scanner_config(chans, parseFile)

